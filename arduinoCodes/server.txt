#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>

#define sensorOut 14 // TCS3200 sensor output connected to GPIO14 (D5)
#define S0 5  // S0 connected to GPIO5 (D1)
#define S1 4  // S1 connected to GPIO4 (D2)
#define S2 0  // S2 connected to GPIO0 (D3)
#define S3 2  // S3 connected to GPIO2 (D4)
#define OPT101_PIN A0 // OPT101 output connected to A0

const char* ssid = "Castro";
const char* password = "castro123";
const String serverURL = "http://192.168.43.224:4000/api/send-sensor-data";

int red = 0, green = 0, blue = 0;
int previousRed = -1, previousGreen = -1, previousBlue = -1;
int previousOptValue = -1;
unsigned long startTime = 0;
bool isTiming = false;

void setup() {
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);
  pinMode(sensorOut, INPUT);

  // Set frequency scaling to 20%
  digitalWrite(S0, HIGH);
  digitalWrite(S1, LOW);
}

void loop() {
  readColor();
  delay(1000); // Wait for 1 second
}

void readColor() {
  int rawRed, rawGreen, rawBlue;

  // Red
  digitalWrite(S2, LOW);
  digitalWrite(S3, LOW);
  rawRed = readPulse(sensorOut);

  // Green
  digitalWrite(S2, HIGH);
  digitalWrite(S3, HIGH);
  rawGreen = readPulse(sensorOut);

  // Blue
  digitalWrite(S2, LOW);
  digitalWrite(S3, HIGH);
  rawBlue = readPulse(sensorOut);

  // Log raw values
  Serial.print("Raw Red: "); Serial.print(rawRed);
  Serial.print(" | Raw Green: "); Serial.print(rawGreen);
  Serial.print(" | Raw Blue: "); Serial.println(rawBlue);

  // Inverted mapping: lower pulse â†’ higher color intensity
  red = constrain(map(rawRed, 20, 400, 255, 0), 0, 255);
  green = constrain(map(rawGreen, 20, 400, 255, 0), 0, 255);
  blue = constrain(map(rawBlue, 20, 400, 255, 0), 0, 255);

  int opt101Value = analogRead(OPT101_PIN);
  int normalizedOptValue = constrain(map(opt101Value, 0, 1023, 0, 500), 0, 500);

  String currentColor = getColorName(red, green, blue);

  if (red != previousRed || green != previousGreen || blue != previousBlue || normalizedOptValue != previousOptValue) {
    unsigned long timeTaken = isTiming ? millis() - startTime : 0;

    if (currentColor == "White") {
      if (isTiming) isTiming = false;
    } else {
      if (!isTiming) {
        startTime = millis();
        isTiming = true;
      }
    }

    float timeTakenInSeconds = (float)timeTaken / 1000;
    Serial.print("Time Taken (seconds): ");
    Serial.println(timeTakenInSeconds, 2);

    sendDataToServer(currentColor, red, green, blue, normalizedOptValue, timeTakenInSeconds);

    previousRed = red;
    previousGreen = green;
    previousBlue = blue;
    previousOptValue = normalizedOptValue;
  }

  Serial.print("Red: "); Serial.print(red);
  Serial.print(" | Green: "); Serial.print(green);
  Serial.print(" | Blue: "); Serial.print(blue);
  Serial.print(" | Color: "); Serial.print(currentColor);
  Serial.print(" | OPT101 Value: "); Serial.println(normalizedOptValue);
}

int readPulse(int pin) {
  unsigned long duration = pulseIn(pin, LOW, 1000000);
  return (duration == 0) ? 1 : duration; // Avoid 0 to prevent divide-by-zero in map()
}

String getColorName(int red, int green, int blue) {
  if (red > 200 && green > 200 && blue > 200) return "White";
  if (red > 200 && green < 100 && blue < 100) return "Red";
  if (red < 100 && green > 200 && blue < 100) return "Green";
  if (red < 100 && green < 150 && blue > 190) return "Blue";
  if (red > 200 && green > 200 && blue < 100) return "Yellow";
  if (red < 100 && green > 200 && blue > 200) return "Cyan";
  if (red > 200 && green < 100 && blue > 200) return "Magenta";
  if (red < 5 && green < 5 && blue < 5) return "Black";
  return "Unknown";
}

void sendDataToServer(String color, int r, int g, int b, int optValue, float timeTaken) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    WiFiClient client;
    http.begin(client, serverURL);
    http.addHeader("Content-Type", "application/json");

    String jsonPayload = "{\"color\":\"" + color +
                         "\",\"RGB\":{\"red\":" + String(r) +
                         ",\"green\":" + String(g) +
                         ",\"blue\":" + String(b) +
                         "},\"opt101Value\":" + String(optValue) +
                         ",\"timeTaken\":" + String(timeTaken, 2) + "}";

    int httpResponseCode = http.POST(jsonPayload);
    Serial.print("HTTP Response Code: ");
    Serial.println(httpResponseCode);

    if (httpResponseCode > 0) {
      Serial.println("Data sent successfully");
    } else {
      Serial.println("Failed to send data");
    }

    http.end();
  } else {
    Serial.println("WiFi not connected");
  }
}
